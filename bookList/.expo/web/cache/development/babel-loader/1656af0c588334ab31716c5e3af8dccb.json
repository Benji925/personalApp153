{"ast":null,"code":"var id = 0;\nvar requests = {};\nvar ImageLoader = {\n  abort: function abort(requestId) {\n    var image = requests[\"\" + requestId];\n\n    if (image) {\n      image.onerror = image.onload = image = null;\n      delete requests[\"\" + requestId];\n    }\n  },\n  getSize: function getSize(uri, success, failure) {\n    var complete = false;\n    var interval = setInterval(callback, 16);\n    var requestId = ImageLoader.load(uri, callback, errorCallback);\n\n    function callback() {\n      var image = requests[\"\" + requestId];\n\n      if (image) {\n        var naturalHeight = image.naturalHeight,\n            naturalWidth = image.naturalWidth;\n\n        if (naturalHeight && naturalWidth) {\n          success(naturalWidth, naturalHeight);\n          complete = true;\n        }\n      }\n\n      if (complete) {\n        ImageLoader.abort(requestId);\n        clearInterval(interval);\n      }\n    }\n\n    function errorCallback() {\n      if (typeof failure === 'function') {\n        failure();\n      }\n\n      ImageLoader.abort(requestId);\n      clearInterval(interval);\n    }\n  },\n  load: function load(uri, onLoad, onError) {\n    id += 1;\n    var image = new window.Image();\n    image.onerror = onError;\n\n    image.onload = function (e) {\n      var onDecode = function onDecode() {\n        return onLoad(e);\n      };\n\n      if (typeof image.decode === 'function') {\n        image.decode().then(onDecode, onDecode);\n      } else {\n        setTimeout(onDecode, 0);\n      }\n    };\n\n    image.src = uri;\n    requests[\"\" + id] = image;\n    return id;\n  },\n  prefetch: function prefetch(uri) {\n    return new Promise(function (resolve, reject) {\n      ImageLoader.load(uri, resolve, reject);\n    });\n  }\n};\nexport default ImageLoader;","map":{"version":3,"sources":["/Users/bengreene/Desktop/SummerWork/personalApp153/bookList/node_modules/react-native-web/src/modules/ImageLoader/index.js"],"names":["id","requests","ImageLoader","abort","requestId","image","onerror","onload","getSize","uri","success","failure","complete","interval","setInterval","callback","load","errorCallback","naturalHeight","naturalWidth","clearInterval","onLoad","onError","window","Image","e","onDecode","decode","then","setTimeout","src","prefetch","Promise","resolve","reject"],"mappings":"AASA,IAAIA,EAAE,GAAG,CAAT;AACA,IAAMC,QAAQ,GAAG,EAAjB;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,KADkB,iBACZC,SADY,EACO;AACvB,QAAIC,KAAK,GAAGJ,QAAQ,MAAIG,SAAJ,CAApB;;AACA,QAAIC,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACE,MAAN,GAAeF,KAAK,GAAG,IAAvC;AACA,aAAOJ,QAAQ,MAAIG,SAAJ,CAAf;AACD;AACF,GAPiB;AAQlBI,EAAAA,OARkB,mBAQVC,GARU,EAQLC,OARK,EAQIC,OARJ,EAQa;AAC7B,QAAIC,QAAQ,GAAG,KAAf;AACA,QAAMC,QAAQ,GAAGC,WAAW,CAACC,QAAD,EAAW,EAAX,CAA5B;AACA,QAAMX,SAAS,GAAGF,WAAW,CAACc,IAAZ,CAAiBP,GAAjB,EAAsBM,QAAtB,EAAgCE,aAAhC,CAAlB;;AAEA,aAASF,QAAT,GAAoB;AAClB,UAAMV,KAAK,GAAGJ,QAAQ,MAAIG,SAAJ,CAAtB;;AACA,UAAIC,KAAJ,EAAW;AAAA,YACDa,aADC,GAC+Bb,KAD/B,CACDa,aADC;AAAA,YACcC,YADd,GAC+Bd,KAD/B,CACcc,YADd;;AAET,YAAID,aAAa,IAAIC,YAArB,EAAmC;AACjCT,UAAAA,OAAO,CAACS,YAAD,EAAeD,aAAf,CAAP;AACAN,UAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AACD,UAAIA,QAAJ,EAAc;AACZV,QAAAA,WAAW,CAACC,KAAZ,CAAkBC,SAAlB;AACAgB,QAAAA,aAAa,CAACP,QAAD,CAAb;AACD;AACF;;AAED,aAASI,aAAT,GAAyB;AACvB,UAAI,OAAON,OAAP,KAAmB,UAAvB,EAAmC;AACjCA,QAAAA,OAAO;AACR;;AACDT,MAAAA,WAAW,CAACC,KAAZ,CAAkBC,SAAlB;AACAgB,MAAAA,aAAa,CAACP,QAAD,CAAb;AACD;AACF,GAnCiB;AAoClBG,EAAAA,IApCkB,gBAoCbP,GApCa,EAoCRY,MApCQ,EAoCAC,OApCA,EAoCiB;AACjCtB,IAAAA,EAAE,IAAI,CAAN;AACA,QAAMK,KAAK,GAAG,IAAIkB,MAAM,CAACC,KAAX,EAAd;AACAnB,IAAAA,KAAK,CAACC,OAAN,GAAgBgB,OAAhB;;AACAjB,IAAAA,KAAK,CAACE,MAAN,GAAe,UAAAkB,CAAC,EAAI;AAElB,UAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,eAAML,MAAM,CAACI,CAAD,CAAZ;AAAA,OAAjB;;AACA,UAAI,OAAOpB,KAAK,CAACsB,MAAb,KAAwB,UAA5B,EAAwC;AAItCtB,QAAAA,KAAK,CAACsB,MAAN,GAAeC,IAAf,CAAoBF,QAApB,EAA8BA,QAA9B;AACD,OALD,MAKO;AACLG,QAAAA,UAAU,CAACH,QAAD,EAAW,CAAX,CAAV;AACD;AACF,KAXD;;AAYArB,IAAAA,KAAK,CAACyB,GAAN,GAAYrB,GAAZ;AACAR,IAAAA,QAAQ,MAAID,EAAJ,CAAR,GAAoBK,KAApB;AACA,WAAOL,EAAP;AACD,GAvDiB;AAwDlB+B,EAAAA,QAxDkB,oBAwDTtB,GAxDS,EAwDK;AACrB,WAAO,IAAIuB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtChC,MAAAA,WAAW,CAACc,IAAZ,CAAiBP,GAAjB,EAAsBwB,OAAtB,EAA+BC,MAA/B;AACD,KAFM,CAAP;AAGD;AA5DiB,CAApB;AA+DA,eAAehC,WAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nlet id = 0;\nconst requests = {};\n\nconst ImageLoader = {\n  abort(requestId: number) {\n    let image = requests[`${requestId}`];\n    if (image) {\n      image.onerror = image.onload = image = null;\n      delete requests[`${requestId}`];\n    }\n  },\n  getSize(uri, success, failure) {\n    let complete = false;\n    const interval = setInterval(callback, 16);\n    const requestId = ImageLoader.load(uri, callback, errorCallback);\n\n    function callback() {\n      const image = requests[`${requestId}`];\n      if (image) {\n        const { naturalHeight, naturalWidth } = image;\n        if (naturalHeight && naturalWidth) {\n          success(naturalWidth, naturalHeight);\n          complete = true;\n        }\n      }\n      if (complete) {\n        ImageLoader.abort(requestId);\n        clearInterval(interval);\n      }\n    }\n\n    function errorCallback() {\n      if (typeof failure === 'function') {\n        failure();\n      }\n      ImageLoader.abort(requestId);\n      clearInterval(interval);\n    }\n  },\n  load(uri, onLoad, onError): number {\n    id += 1;\n    const image = new window.Image();\n    image.onerror = onError;\n    image.onload = e => {\n      // avoid blocking the main thread\n      const onDecode = () => onLoad(e);\n      if (typeof image.decode === 'function') {\n        // Safari currently throws exceptions when decoding svgs.\n        // We want to catch that error and allow the load handler\n        // to be forwarded to the onLoad handler in this case\n        image.decode().then(onDecode, onDecode);\n      } else {\n        setTimeout(onDecode, 0);\n      }\n    };\n    image.src = uri;\n    requests[`${id}`] = image;\n    return id;\n  },\n  prefetch(uri): Promise {\n    return new Promise((resolve, reject) => {\n      ImageLoader.load(uri, resolve, reject);\n    });\n  }\n};\n\nexport default ImageLoader;\n"]},"metadata":{},"sourceType":"module"}